from kafka import KafkaConsumer
import json
import time


def readSLANotification(topic_name, key):
    """ This function retrieves all notifications of potential SLA violations generated by the SLA Breach Predictor.
    Currently, we are simulating that the TMF is subscribed to the real SLA Breach Predicto Kafka topic.
    TODO -> Verify which trustor (5GZORRO Participant) the notification is associated with as the Trust Framework may be
     managing the trust of more than one at the same time. if message.key.decode('utf-8') =="""

    consumer = KafkaConsumer(topic_name, bootstrap_servers='kafka:9093', group_id=None, enable_auto_commit=False, auto_offset_reset='earliest', consumer_timeout_ms=130)
    notifications = []
    for message in consumer:
        sla_information = json.loads(message.value.decode())
        notifications.append(sla_information)

    consumer.close()
    return notifications

def readLastTrustValues(topic_name, last_interaction, current_interation_number):
    """ This method is utilised to retrieve all new trust information generated by a particular trustee on which we want
    to update our previous trust score. This method only retrieves new inputs """
    consumer = KafkaConsumer(topic_name, bootstrap_servers='kafka:9093', group_id=None, enable_auto_commit=False, auto_offset_reset='earliest', consumer_timeout_ms=130)
    values = []

    for message in consumer:
        trust_information = json.loads(message.value.decode())
        interation_number = trust_information["currentInteractionNumber"]

        """ Looking for all new interactions not previously contemplated"""
        if int(interation_number) > int(last_interaction) and int(interation_number) == int(current_interation_number):
            data = {"trustorDID": trust_information["trustor"]["trustorDID"],
                    "trusteeDID": trust_information["trustor"]["trusteeDID"],
                    "offerDID": trust_information["trustor"]["offerDID"],
                    "trusteeSatisfaction": trust_information["trustee"]["trusteeSatisfaction"],
                    "credibility": trust_information["trustor"]["credibility"],
                    "transactionFactor": trust_information["trustor"]["transactionFactor"],
                    "communityFactor": trust_information["trustor"]["communityFactor"],
                    "interaction_number": trust_information["trustor"]["direct_parameters"]["interactionNumber"],
                    "totalInteractionNumber": trust_information["trustor"]["direct_parameters"]["totalInteractionNumber"],
                    "userSatisfaction": trust_information["trustor"]["direct_parameters"]["userSatisfaction"],
                    "trust_value": trust_information["trust_value"],
                    "initEvaluationPeriod": trust_information["initEvaluationPeriod"],
                    "endEvaluationPeriod": trust_information["endEvaluationPeriod"]
                    }
            values.append(data)

    consumer.close()
    return values

def readLastTrustInterationValues(topic_name, current_interation_number):
    """ This method is utilised to retrieve all new trust information generated by a particular trustee on the current
     interaction number X """
    consumer = KafkaConsumer(topic_name, bootstrap_servers='kafka:9093', group_id=None, enable_auto_commit=False, auto_offset_reset='earliest', consumer_timeout_ms=375)

    for message in consumer:
        trust_information = json.loads(message.value.decode())
        if current_interation_number > 0:
            interation_number = trust_information["trustor"]["direct_parameters"]["interactionNumber"]

            """ Checking whether the current interaction is the one we are looking for"""
            if interation_number == current_interation_number-1:
                data = {"trustorDID": trust_information["trustor"]["trustorDID"],
                        "trusteeDID": trust_information["trustor"]["trusteeDID"],
                        "offerDID": trust_information["trustor"]["offerDID"],
                        "trusteeSatisfaction": trust_information["trustee"]["trusteeSatisfaction"],
                        "credibility": trust_information["trustor"]["credibility"],
                        "transactionFactor": trust_information["trustor"]["transactionFactor"],
                        "communityFactor": trust_information["trustor"]["communityFactor"],
                        "interaction_number": trust_information["trustor"]["direct_parameters"]["interactionNumber"],
                        "totalInteractionNumber": trust_information["trustor"]["direct_parameters"]["totalInteractionNumber"],
                        "userSatisfaction": trust_information["trustor"]["direct_parameters"]["userSatisfaction"],
                        "trust_value": trust_information["trust_value"],
                        "initEvaluationPeriod": trust_information["initEvaluationPeriod"],
                        "endEvaluationPeriod": trust_information["endEvaluationPeriod"]
                        }
                consumer.close()
                return data
    consumer.close()

def readLastTrustValue(topic_name):
    """ This method obtains the last trust value recorded in Kafka for a specific a trustor, trustee and offer. Only
     specific information is returned """
    consumer = KafkaConsumer(topic_name, bootstrap_servers='kafka:9093', group_id=None, enable_auto_commit=False, auto_offset_reset='earliest', consumer_timeout_ms=200)
    data = {}
    lastValue = 0
    for message in consumer:
        trust_information = json.loads(message.value.decode())
        if trust_information and trust_information["endEvaluationPeriod"] > lastValue:
            lastValue = trust_information["endEvaluationPeriod"]
            data = {"trustorDID": trust_information["trustor"]["trustorDID"],
                    "trusteeDID": trust_information["trustor"]["trusteeDID"],
                    "offerDID": trust_information["trustor"]["offerDID"],
                    "trusteeSatisfaction": trust_information["trustee"]["trusteeSatisfaction"],
                    "credibility": trust_information["trustor"]["credibility"],
                    "transactionFactor": trust_information["trustor"]["transactionFactor"],
                    "communityFactor": trust_information["trustor"]["communityFactor"],
                    "interaction_number": trust_information["trustor"]["direct_parameters"]["interactionNumber"],
                    "totalInteractionNumber": trust_information["trustor"]["direct_parameters"]["totalInteractionNumber"],
                    "userSatisfaction": trust_information["trustor"]["direct_parameters"]["userSatisfaction"],
                    "trust_value": trust_information["trust_value"],
                    "initEvaluationPeriod": trust_information["initEvaluationPeriod"],
                    "endEvaluationPeriod": trust_information["endEvaluationPeriod"]
                    }

    consumer.close()
    return data

def readAllInformationTrustValue(topic_name):
    """ This method obtains the last trust value recorded in Kafka for a specific a trustor, trustee and offer. All
     previously recorded trust information is returned """
    consumer = KafkaConsumer(topic_name, bootstrap_servers='kafka:9093', group_id=None, enable_auto_commit=False, auto_offset_reset='earliest', consumer_timeout_ms=130)
    lastValue = 0
    data = {}

    for message in consumer:
        trust_information = json.loads(message.value.decode())
        if trust_information and trust_information["endEvaluationPeriod"] > lastValue:
            lastValue = trust_information["endEvaluationPeriod"]
            data = trust_information

    consumer.close()
    return data

def readTrusteeInteractions(topic_name):
    """ This function counts all interactions with a particular trustee in its Kafka channel """
    consumer = KafkaConsumer(topic_name, bootstrap_servers='kafka:9093', group_id=None, enable_auto_commit=False, auto_offset_reset='earliest', consumer_timeout_ms=200)
    counter = 0

    for message in consumer:
        counter += 1

    consumer.close()
    return counter

def readOfferTrusteeInteractions(topic_name, offerTrusteDIDs):
    """ This function counts all interactions with a particular offer in its Kafka channel """
    consumer = KafkaConsumer(topic_name, bootstrap_servers='kafka:9093', group_id=None, enable_auto_commit=False, auto_offset_reset='earliest', consumer_timeout_ms=200)
    counter = 0

    for message in consumer:
        if message.key.decode('utf-8') == offerTrusteDIDs:
            counter += 1

    consumer.close()
    return counter

def readSatisfactionSummation(topic_name):
    """ This method returns the satisfaction average rate between a trustor and a trustee  """
    #time_consumer = time.time()
    consumer = KafkaConsumer(topic_name, bootstrap_servers='kafka:9093', group_id=None, enable_auto_commit=False, auto_offset_reset='earliest', consumer_timeout_ms=200)
    #print("##### %s seconds Reading KafkaConsumer" % (time.time()-time_consumer))
    counter = 0
    satisfactionsummation = 0.0

    #time_bucle = time.time()
    #time_for = 0

    for message in consumer:
        time_json = time.time()
        trust_information = json.loads(message.value.decode())
        #print("##### %s seconds JSON LOADS" % (time.time()-time_json))
        #time_if = time.time()
        if trust_information:
            #print("##### %s seconds Comprobacion IF" % (time.time()-time_if))
            #time_accesso = time.time()
            counter += 1
            satisfactionsummation = satisfactionsummation + trust_information["trustor"]["direct_parameters"]["userSatisfaction"]
            #print("##### %s seconds ACCESSO MATRIZ" % (time.time()-time_accesso))
        #time_for = time.time()

    #print("##### %s FOR TIME" % (time.time()-time_for))
    #print("##### %s seconds readSatisfactionSummation" % (time.time()-time_consumer))
    consumer.close()
    #print("SUMMATION SATISFACTION ---->", satisfactionsummation, counter)

    return round(satisfactionsummation/counter, 3)