from kafka import KafkaConsumer
import json
import logging
import time


class Consumer():

    consumer = None
    name_server = 'kafka:9093'
    #topics = None

    def start(self):
        global consumer

        self.consumer = KafkaConsumer(bootstrap_servers='kafka:9093', group_id=None, auto_offset_reset='earliest')
        #self.consumer = KafkaConsumer(topic, bootstrap_servers=self.name_servername_server, group_id=None,
                                      #enable_auto_commit=False, auto_offset_reset='earliest')

        return self.consumer

    def subscribe(self, topics):
        """" Topics must be a list """
        global consumer

        try:
            self.consumer.subscribe(topics)
            return 1
        except Exception as e:
            return 0

    def stop(self):
        global consumer

        self.consumer.unsubscribe()
        self.consumer.close()

    def start_reading(self, data_lock, d):
        logging.basicConfig(level=logging.INFO)
        global consumer
        global historical

        logging.info("%%%%%%%% START READOMG MENSSAGE %%%%%%%%")
        for message in self.consumer:
            trust_information = json.loads(message.value.decode())
            logging.info("%%%%%%%% NEW MENSSAGE %%%%%%%% %f", time.time())
            #data_lock.acquire()

            if trust_information["trustor"]["trustorDID"] in self.historical:
                d[trust_information["trustor"]["trustorDID"]].append(trust_information)
                #prueba = self.historical
                #historical = history
                #cola.put(history)
            else:
                d[trust_information["trustor"]["trustorDID"]] = [trust_information]
                #prueba = self.historical
                #historical = history
                #cola.put(history)

            #data_lock.release()
            logging.info("New message: %s", d)


    def readSLANotification(self, historical, trustor, trustee, offerDID):
        """ This function retrieves all notifications of potential SLA violations generated by the SLA Breach Predictor.
        Currently, we are simulating that the TMF is subscribed to the real SLA Breach Predicto Kafka topic.
        TODO -> Verify which trustor (5GZORRO Participant) the notification is associated with as the Trust Framework may be
         managing the trust of more than one at the same time. if message.key.decode('utf-8') =="""
        global consumer

        notifications = []
        for message in consumer:
            sla_information = json.loads(message.value.decode())
            notifications.append(sla_information)

        return notifications

    def readLastTrustValues(self, historical, trustor, trustee, last_interaction, current_interation_number):
        """ This method is utilised to retrieve all new trust information generated by a particular trustee on which we want
        to update our previous trust score. This method only retrieves new inputs """
        #global historical
        values = []

        for interactions in reversed(historical):

            interation_number = interactions["currentInteractionNumber"]

            """ Looking for all new interactions not previously contemplated"""
            if interactions["trustor"]["trustorDID"] == trustor and \
                        interactions["trustor"]["trusteeDID"] == trustee and \
                        int(interation_number) > int(last_interaction) and \
                        int(interation_number) == int(current_interation_number):
                data = {"trustorDID": interactions["trustor"]["trustorDID"],
                            "trusteeDID": interactions["trustor"]["trusteeDID"],
                            "offerDID": interactions["trustor"]["offerDID"],
                            "trusteeSatisfaction": interactions["trustee"]["trusteeSatisfaction"],
                            "credibility": interactions["trustor"]["credibility"],
                            "transactionFactor": interactions["trustor"]["transactionFactor"],
                            "communityFactor": interactions["trustor"]["communityFactor"],
                            "interaction_number": interactions["trustor"]["direct_parameters"]["interactionNumber"],
                            "totalInteractionNumber": interactions["trustor"]["direct_parameters"]["totalInteractionNumber"],
                            "userSatisfaction": interactions["trustor"]["direct_parameters"]["userSatisfaction"],
                            "trust_value": interactions["trust_value"],
                            "initEvaluationPeriod": interactions["initEvaluationPeriod"],
                            "endEvaluationPeriod": interactions["endEvaluationPeriod"]
                        }
                values.append(data)

        return values

    def readLastTrustInterationValues(self, historical, trustor, trustee, offer, current_interation_number):
        """ This method is utilised to retrieve all new trust information generated by a particular trustee on the current
         interaction number X """
        #global historical

        data ={}

        for interactions in reversed(historical):
            if interactions["trustor"]["trustorDID"] == trustor and \
                    interactions["trustor"]["trusteeDID"] == trustee and \
                    interactions["trustor"]["offerDID"] == offer and \
                    current_interation_number > 0:

                interation_number = interactions["trustor"]["direct_parameters"]["interactionNumber"]

                """ Checking whether the current interaction is the one we are looking for"""
                if interation_number == current_interation_number-1:
                    data = {"trustorDID": interactions["trustor"]["trustorDID"],
                                "trusteeDID": interactions["trustor"]["trusteeDID"],
                                "offerDID": interactions["trustor"]["offerDID"],
                                "trusteeSatisfaction": interactions["trustee"]["trusteeSatisfaction"],
                                "credibility": interactions["trustor"]["credibility"],
                                "transactionFactor": interactions["trustor"]["transactionFactor"],
                                "communityFactor": interactions["trustor"]["communityFactor"],
                                "interaction_number": interactions["trustor"]["direct_parameters"]["interactionNumber"],
                                "totalInteractionNumber": interactions["trustor"]["direct_parameters"]["totalInteractionNumber"],
                                "userSatisfaction": interactions["trustor"]["direct_parameters"]["userSatisfaction"],
                                "trust_value": interactions["trust_value"],
                                "initEvaluationPeriod": interactions["initEvaluationPeriod"],
                                "endEvaluationPeriod": interactions["endEvaluationPeriod"]
                             }
                    return data

        return data

    def readLastTrustValue(self, historical, trustor, trustee):
        """ This method obtains the last trust value recorded in Kafka for a specific a trustor, and trustee. Only
         specific information is returned """
        #global historical
        data = {}
        lastValue = 0

        for interactions in reversed(historical):
            if interactions["trustor"]["trustorDID"] == trustor and \
                        interactions["trustor"]["trusteeDID"] == trustee:
                data = {"trustorDID": interactions["trustor"]["trustorDID"],
                            "trusteeDID": interactions["trustor"]["trusteeDID"],
                            "offerDID": interactions["trustor"]["offerDID"],
                            "trusteeSatisfaction": interactions["trustee"]["trusteeSatisfaction"],
                            "credibility": interactions["trustor"]["credibility"],
                            "transactionFactor": interactions["trustor"]["transactionFactor"],
                            "communityFactor": interactions["trustor"]["communityFactor"],
                            "interaction_number": interactions["trustor"]["direct_parameters"]["interactionNumber"],
                            "totalInteractionNumber": interactions["trustor"]["direct_parameters"]["totalInteractionNumber"],
                            "userSatisfaction": interactions["trustor"]["direct_parameters"]["userSatisfaction"],
                            "trust_value": interactions["trust_value"],
                            "initEvaluationPeriod": interactions["initEvaluationPeriod"],
                            "endEvaluationPeriod": interactions["endEvaluationPeriod"]
                        }
                return data

        return data


    def readLastTrustValueOffer(self, historical, trustor, trustee, offer):
        """ This method obtains the last trust value recorded in Kafka for a specific a trustor, trustee and offer. Only
         specific information is returned """
        #global historical
        data = {}
        lastValue = 0

        for interactions in reversed(historical):
            if interactions["trustor"]["trustorDID"] == trustor and \
                        interactions["trustor"]["trusteeDID"] == trustee and \
                        interactions["trustor"]["offerDID"] == offer:
                data = {"trustorDID": interactions["trustor"]["trustorDID"],
                            "trusteeDID": interactions["trustor"]["trusteeDID"],
                            "offerDID": interactions["trustor"]["offerDID"],
                            "trusteeSatisfaction": interactions["trustee"]["trusteeSatisfaction"],
                            "credibility": interactions["trustor"]["credibility"],
                            "transactionFactor": interactions["trustor"]["transactionFactor"],
                            "communityFactor": interactions["trustor"]["communityFactor"],
                            "interaction_number": interactions["trustor"]["direct_parameters"]["interactionNumber"],
                            "totalInteractionNumber": interactions["trustor"]["direct_parameters"]["totalInteractionNumber"],
                            "userSatisfaction": interactions["trustor"]["direct_parameters"]["userSatisfaction"],
                            "trust_value": interactions["trust_value"],
                            "initEvaluationPeriod": interactions["initEvaluationPeriod"],
                            "endEvaluationPeriod": interactions["endEvaluationPeriod"]
                         }
                return data

        return data


    def readAllInformationTrustValue(self, historical, trustor, trustee, offer):
        """ This method obtains the last trust value recorded in Kafka for a specific a trustor, trustee and offer. All
         previously recorded trust information is returned """
        #global historical
        lastValue = 0
        data = {}

        for interactions in reversed(historical):
            if interactions["trustor"]["trustorDID"] == trustor and \
                        interactions["trustor"]["trusteeDID"] == trustee and \
                        interactions["trustor"]["offerDID"] == offer:
                data = {"trustorDID": interactions["trustor"]["trustorDID"],
                            "trusteeDID": interactions["trustor"]["trusteeDID"],
                            "offerDID": interactions["trustor"]["offerDID"],
                            "trusteeSatisfaction": interactions["trustee"]["trusteeSatisfaction"],
                            "credibility": interactions["trustor"]["credibility"],
                            "transactionFactor": interactions["trustor"]["transactionFactor"],
                            "communityFactor": interactions["trustor"]["communityFactor"],
                            "interaction_number": interactions["trustor"]["direct_parameters"]["interactionNumber"],
                            "totalInteractionNumber": interactions["trustor"]["direct_parameters"]["totalInteractionNumber"],
                            "userSatisfaction": interactions["trustor"]["direct_parameters"]["userSatisfaction"],
                            "trust_value": interactions["trust_value"],
                            "initEvaluationPeriod": interactions["initEvaluationPeriod"],
                            "endEvaluationPeriod": interactions["endEvaluationPeriod"]
                        }
            break

        return data

    def readTrusteeInteractions(self, historical, trustee):
        """ This function counts all interactions with a particular trustee in its Kafka channel """
        #global historical
        counter = 0

        for interactions in reversed(historical):
            if interactions["trustor"]["trusteeDID"] == trustee:
                counter += 1

        return counter

    def readOfferTrusteeInteractions(self, historical, trustee, offerTrusteDIDs):
        """ This function counts all interactions with a particular offer in its Kafka channel """
        #global historical
        counter = 0

        for interactions in reversed(historical):
            if interactions["trustor"]["trusteeDID"] == trustee and \
                    interactions["trustor"]["offerDID"] == offerTrusteDIDs:
                counter += 1

        return counter

    def readSatisfactionSummation(self, historical, trustor, trustee):
        """ This method returns the satisfaction average rate between a trustor and a trustee  """
        #global historical

        counter = 0
        satisfactionsummation = 0.0
        iterations = 0

        for interactions in reversed(historical):
            iterations+=1
            if interactions["trustor"]["trustorDID"] == trustor and \
                        interactions["trustor"]["trusteeDID"] == trustee:
                counter += 1
                satisfactionsummation = satisfactionsummation + interactions["trustor"]["direct_parameters"]["userSatisfaction"]

        return round(satisfactionsummation/counter, 3)